/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package medley.simulator;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Entry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 578839843228273551L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Entry\",\"namespace\":\"medley.simulator\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"record\",\"name\":\"Id\",\"fields\":[{\"name\":\"hostname\",\"type\":\"string\",\"default\":\"192.0.0.1\"},{\"name\":\"port\",\"type\":\"int\",\"default\":\"6666\"},{\"name\":\"ts\",\"type\":\"long\"}]}},{\"name\":\"incarnation\",\"type\":\"int\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"Status\",\"symbols\":[\"ACTIVE\",\"SUSPECTED\",\"FAILED\",\"JOIN\",\"INDIRECT\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public medley.simulator.Id id;
  @Deprecated public int incarnation;
  @Deprecated public medley.simulator.Status status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Entry() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param incarnation The new value for incarnation
   * @param status The new value for status
   */
  public Entry(medley.simulator.Id id, java.lang.Integer incarnation, medley.simulator.Status status) {
    this.id = id;
    this.incarnation = incarnation;
    this.status = status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return incarnation;
    case 2: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (medley.simulator.Id)value$; break;
    case 1: incarnation = (java.lang.Integer)value$; break;
    case 2: status = (medley.simulator.Status)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public medley.simulator.Id getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(medley.simulator.Id value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'incarnation' field.
   * @return The value of the 'incarnation' field.
   */
  public java.lang.Integer getIncarnation() {
    return incarnation;
  }

  /**
   * Sets the value of the 'incarnation' field.
   * @param value the value to set.
   */
  public void setIncarnation(java.lang.Integer value) {
    this.incarnation = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public medley.simulator.Status getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(medley.simulator.Status value) {
    this.status = value;
  }

  /**
   * Creates a new Entry RecordBuilder.
   * @return A new Entry RecordBuilder
   */
  public static medley.simulator.Entry.Builder newBuilder() {
    return new medley.simulator.Entry.Builder();
  }

  /**
   * Creates a new Entry RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Entry RecordBuilder
   */
  public static medley.simulator.Entry.Builder newBuilder(medley.simulator.Entry.Builder other) {
    return new medley.simulator.Entry.Builder(other);
  }

  /**
   * Creates a new Entry RecordBuilder by copying an existing Entry instance.
   * @param other The existing instance to copy.
   * @return A new Entry RecordBuilder
   */
  public static medley.simulator.Entry.Builder newBuilder(medley.simulator.Entry other) {
    return new medley.simulator.Entry.Builder(other);
  }

  /**
   * RecordBuilder for Entry instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Entry>
    implements org.apache.avro.data.RecordBuilder<Entry> {

    private medley.simulator.Id id;
    private medley.simulator.Id.Builder idBuilder;
    private int incarnation;
    private medley.simulator.Status status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(medley.simulator.Entry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (other.hasIdBuilder()) {
        this.idBuilder = medley.simulator.Id.newBuilder(other.getIdBuilder());
      }
      if (isValidValue(fields()[1], other.incarnation)) {
        this.incarnation = data().deepCopy(fields()[1].schema(), other.incarnation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Entry instance
     * @param other The existing instance to copy.
     */
    private Builder(medley.simulator.Entry other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      this.idBuilder = null;
      if (isValidValue(fields()[1], other.incarnation)) {
        this.incarnation = data().deepCopy(fields()[1].schema(), other.incarnation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public medley.simulator.Id getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public medley.simulator.Entry.Builder setId(medley.simulator.Id value) {
      validate(fields()[0], value);
      this.idBuilder = null;
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'id' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public medley.simulator.Id.Builder getIdBuilder() {
      if (idBuilder == null) {
        if (hasId()) {
          setIdBuilder(medley.simulator.Id.newBuilder(id));
        } else {
          setIdBuilder(medley.simulator.Id.newBuilder());
        }
      }
      return idBuilder;
    }

    /**
     * Sets the Builder instance for the 'id' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public medley.simulator.Entry.Builder setIdBuilder(medley.simulator.Id.Builder value) {
      clearId();
      idBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'id' field has an active Builder instance
     * @return True if the 'id' field has an active Builder instance
     */
    public boolean hasIdBuilder() {
      return idBuilder != null;
    }

    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public medley.simulator.Entry.Builder clearId() {
      id = null;
      idBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'incarnation' field.
      * @return The value.
      */
    public java.lang.Integer getIncarnation() {
      return incarnation;
    }

    /**
      * Sets the value of the 'incarnation' field.
      * @param value The value of 'incarnation'.
      * @return This builder.
      */
    public medley.simulator.Entry.Builder setIncarnation(int value) {
      validate(fields()[1], value);
      this.incarnation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'incarnation' field has been set.
      * @return True if the 'incarnation' field has been set, false otherwise.
      */
    public boolean hasIncarnation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'incarnation' field.
      * @return This builder.
      */
    public medley.simulator.Entry.Builder clearIncarnation() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public medley.simulator.Status getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public medley.simulator.Entry.Builder setStatus(medley.simulator.Status value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public medley.simulator.Entry.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Entry build() {
      try {
        Entry record = new Entry();
        if (idBuilder != null) {
          record.id = this.idBuilder.build();
        } else {
          record.id = fieldSetFlags()[0] ? this.id : (medley.simulator.Id) defaultValue(fields()[0]);
        }
        record.incarnation = fieldSetFlags()[1] ? this.incarnation : (java.lang.Integer) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (medley.simulator.Status) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
