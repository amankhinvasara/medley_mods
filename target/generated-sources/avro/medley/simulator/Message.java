/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package medley.simulator;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6335762439629157247L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"medley.simulator\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Type\",\"symbols\":[\"PING\",\"JOIN\",\"JOIN_ACK\",\"ACK\",\"IND_PING\",\"IND_PING_ACK\",\"TERMINATE\",\"CRASH\",\"UNLUCKY\",\"REPORT_ALIVE\"]}},{\"name\":\"sender_id\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Id\",\"fields\":[{\"name\":\"hostname\",\"type\":\"string\",\"default\":\"192.0.0.1\"},{\"name\":\"port\",\"type\":\"int\",\"default\":\"6666\"},{\"name\":\"ts\",\"type\":\"long\"}]}],\"default\":null},{\"name\":\"sender_incarnation\",\"type\":\"int\"},{\"name\":\"initiator_id\",\"type\":[\"null\",\"Id\"],\"default\":null},{\"name\":\"target_id\",\"type\":[\"null\",\"Id\"],\"default\":null},{\"name\":\"creator_id\",\"type\":[\"null\",\"Id\"],\"default\":null},{\"name\":\"table\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Entry\",\"fields\":[{\"name\":\"id\",\"type\":\"Id\"},{\"name\":\"incarnation\",\"type\":\"int\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"Status\",\"symbols\":[\"ACTIVE\",\"SUSPECTED\",\"FAILED\",\"JOIN\",\"INDIRECT\"]}}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public medley.simulator.Type type;
  @Deprecated public medley.simulator.Id sender_id;
  @Deprecated public int sender_incarnation;
  @Deprecated public medley.simulator.Id initiator_id;
  @Deprecated public medley.simulator.Id target_id;
  @Deprecated public medley.simulator.Id creator_id;
  @Deprecated public java.util.List<medley.simulator.Entry> table;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Message() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param sender_id The new value for sender_id
   * @param sender_incarnation The new value for sender_incarnation
   * @param initiator_id The new value for initiator_id
   * @param target_id The new value for target_id
   * @param creator_id The new value for creator_id
   * @param table The new value for table
   */
  public Message(medley.simulator.Type type, medley.simulator.Id sender_id, java.lang.Integer sender_incarnation, medley.simulator.Id initiator_id, medley.simulator.Id target_id, medley.simulator.Id creator_id, java.util.List<medley.simulator.Entry> table) {
    this.type = type;
    this.sender_id = sender_id;
    this.sender_incarnation = sender_incarnation;
    this.initiator_id = initiator_id;
    this.target_id = target_id;
    this.creator_id = creator_id;
    this.table = table;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return sender_id;
    case 2: return sender_incarnation;
    case 3: return initiator_id;
    case 4: return target_id;
    case 5: return creator_id;
    case 6: return table;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (medley.simulator.Type)value$; break;
    case 1: sender_id = (medley.simulator.Id)value$; break;
    case 2: sender_incarnation = (java.lang.Integer)value$; break;
    case 3: initiator_id = (medley.simulator.Id)value$; break;
    case 4: target_id = (medley.simulator.Id)value$; break;
    case 5: creator_id = (medley.simulator.Id)value$; break;
    case 6: table = (java.util.List<medley.simulator.Entry>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public medley.simulator.Type getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(medley.simulator.Type value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'sender_id' field.
   * @return The value of the 'sender_id' field.
   */
  public medley.simulator.Id getSenderId() {
    return sender_id;
  }

  /**
   * Sets the value of the 'sender_id' field.
   * @param value the value to set.
   */
  public void setSenderId(medley.simulator.Id value) {
    this.sender_id = value;
  }

  /**
   * Gets the value of the 'sender_incarnation' field.
   * @return The value of the 'sender_incarnation' field.
   */
  public java.lang.Integer getSenderIncarnation() {
    return sender_incarnation;
  }

  /**
   * Sets the value of the 'sender_incarnation' field.
   * @param value the value to set.
   */
  public void setSenderIncarnation(java.lang.Integer value) {
    this.sender_incarnation = value;
  }

  /**
   * Gets the value of the 'initiator_id' field.
   * @return The value of the 'initiator_id' field.
   */
  public medley.simulator.Id getInitiatorId() {
    return initiator_id;
  }

  /**
   * Sets the value of the 'initiator_id' field.
   * @param value the value to set.
   */
  public void setInitiatorId(medley.simulator.Id value) {
    this.initiator_id = value;
  }

  /**
   * Gets the value of the 'target_id' field.
   * @return The value of the 'target_id' field.
   */
  public medley.simulator.Id getTargetId() {
    return target_id;
  }

  /**
   * Sets the value of the 'target_id' field.
   * @param value the value to set.
   */
  public void setTargetId(medley.simulator.Id value) {
    this.target_id = value;
  }

  /**
   * Gets the value of the 'creator_id' field.
   * @return The value of the 'creator_id' field.
   */
  public medley.simulator.Id getCreatorId() {
    return creator_id;
  }

  /**
   * Sets the value of the 'creator_id' field.
   * @param value the value to set.
   */
  public void setCreatorId(medley.simulator.Id value) {
    this.creator_id = value;
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public java.util.List<medley.simulator.Entry> getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.util.List<medley.simulator.Entry> value) {
    this.table = value;
  }

  /**
   * Creates a new Message RecordBuilder.
   * @return A new Message RecordBuilder
   */
  public static medley.simulator.Message.Builder newBuilder() {
    return new medley.simulator.Message.Builder();
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Message RecordBuilder
   */
  public static medley.simulator.Message.Builder newBuilder(medley.simulator.Message.Builder other) {
    return new medley.simulator.Message.Builder(other);
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Message instance.
   * @param other The existing instance to copy.
   * @return A new Message RecordBuilder
   */
  public static medley.simulator.Message.Builder newBuilder(medley.simulator.Message other) {
    return new medley.simulator.Message.Builder(other);
  }

  /**
   * RecordBuilder for Message instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private medley.simulator.Type type;
    private medley.simulator.Id sender_id;
    private medley.simulator.Id.Builder sender_idBuilder;
    private int sender_incarnation;
    private medley.simulator.Id initiator_id;
    private medley.simulator.Id.Builder initiator_idBuilder;
    private medley.simulator.Id target_id;
    private medley.simulator.Id.Builder target_idBuilder;
    private medley.simulator.Id creator_id;
    private medley.simulator.Id.Builder creator_idBuilder;
    private java.util.List<medley.simulator.Entry> table;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(medley.simulator.Message.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sender_id)) {
        this.sender_id = data().deepCopy(fields()[1].schema(), other.sender_id);
        fieldSetFlags()[1] = true;
      }
      if (other.hasSenderIdBuilder()) {
        this.sender_idBuilder = medley.simulator.Id.newBuilder(other.getSenderIdBuilder());
      }
      if (isValidValue(fields()[2], other.sender_incarnation)) {
        this.sender_incarnation = data().deepCopy(fields()[2].schema(), other.sender_incarnation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.initiator_id)) {
        this.initiator_id = data().deepCopy(fields()[3].schema(), other.initiator_id);
        fieldSetFlags()[3] = true;
      }
      if (other.hasInitiatorIdBuilder()) {
        this.initiator_idBuilder = medley.simulator.Id.newBuilder(other.getInitiatorIdBuilder());
      }
      if (isValidValue(fields()[4], other.target_id)) {
        this.target_id = data().deepCopy(fields()[4].schema(), other.target_id);
        fieldSetFlags()[4] = true;
      }
      if (other.hasTargetIdBuilder()) {
        this.target_idBuilder = medley.simulator.Id.newBuilder(other.getTargetIdBuilder());
      }
      if (isValidValue(fields()[5], other.creator_id)) {
        this.creator_id = data().deepCopy(fields()[5].schema(), other.creator_id);
        fieldSetFlags()[5] = true;
      }
      if (other.hasCreatorIdBuilder()) {
        this.creator_idBuilder = medley.simulator.Id.newBuilder(other.getCreatorIdBuilder());
      }
      if (isValidValue(fields()[6], other.table)) {
        this.table = data().deepCopy(fields()[6].schema(), other.table);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Message instance
     * @param other The existing instance to copy.
     */
    private Builder(medley.simulator.Message other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sender_id)) {
        this.sender_id = data().deepCopy(fields()[1].schema(), other.sender_id);
        fieldSetFlags()[1] = true;
      }
      this.sender_idBuilder = null;
      if (isValidValue(fields()[2], other.sender_incarnation)) {
        this.sender_incarnation = data().deepCopy(fields()[2].schema(), other.sender_incarnation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.initiator_id)) {
        this.initiator_id = data().deepCopy(fields()[3].schema(), other.initiator_id);
        fieldSetFlags()[3] = true;
      }
      this.initiator_idBuilder = null;
      if (isValidValue(fields()[4], other.target_id)) {
        this.target_id = data().deepCopy(fields()[4].schema(), other.target_id);
        fieldSetFlags()[4] = true;
      }
      this.target_idBuilder = null;
      if (isValidValue(fields()[5], other.creator_id)) {
        this.creator_id = data().deepCopy(fields()[5].schema(), other.creator_id);
        fieldSetFlags()[5] = true;
      }
      this.creator_idBuilder = null;
      if (isValidValue(fields()[6], other.table)) {
        this.table = data().deepCopy(fields()[6].schema(), other.table);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public medley.simulator.Type getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public medley.simulator.Message.Builder setType(medley.simulator.Type value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public medley.simulator.Message.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sender_id' field.
      * @return The value.
      */
    public medley.simulator.Id getSenderId() {
      return sender_id;
    }

    /**
      * Sets the value of the 'sender_id' field.
      * @param value The value of 'sender_id'.
      * @return This builder.
      */
    public medley.simulator.Message.Builder setSenderId(medley.simulator.Id value) {
      validate(fields()[1], value);
      this.sender_idBuilder = null;
      this.sender_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sender_id' field has been set.
      * @return True if the 'sender_id' field has been set, false otherwise.
      */
    public boolean hasSenderId() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'sender_id' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public medley.simulator.Id.Builder getSenderIdBuilder() {
      if (sender_idBuilder == null) {
        if (hasSenderId()) {
          setSenderIdBuilder(medley.simulator.Id.newBuilder(sender_id));
        } else {
          setSenderIdBuilder(medley.simulator.Id.newBuilder());
        }
      }
      return sender_idBuilder;
    }

    /**
     * Sets the Builder instance for the 'sender_id' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public medley.simulator.Message.Builder setSenderIdBuilder(medley.simulator.Id.Builder value) {
      clearSenderId();
      sender_idBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sender_id' field has an active Builder instance
     * @return True if the 'sender_id' field has an active Builder instance
     */
    public boolean hasSenderIdBuilder() {
      return sender_idBuilder != null;
    }

    /**
      * Clears the value of the 'sender_id' field.
      * @return This builder.
      */
    public medley.simulator.Message.Builder clearSenderId() {
      sender_id = null;
      sender_idBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sender_incarnation' field.
      * @return The value.
      */
    public java.lang.Integer getSenderIncarnation() {
      return sender_incarnation;
    }

    /**
      * Sets the value of the 'sender_incarnation' field.
      * @param value The value of 'sender_incarnation'.
      * @return This builder.
      */
    public medley.simulator.Message.Builder setSenderIncarnation(int value) {
      validate(fields()[2], value);
      this.sender_incarnation = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sender_incarnation' field has been set.
      * @return True if the 'sender_incarnation' field has been set, false otherwise.
      */
    public boolean hasSenderIncarnation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sender_incarnation' field.
      * @return This builder.
      */
    public medley.simulator.Message.Builder clearSenderIncarnation() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiator_id' field.
      * @return The value.
      */
    public medley.simulator.Id getInitiatorId() {
      return initiator_id;
    }

    /**
      * Sets the value of the 'initiator_id' field.
      * @param value The value of 'initiator_id'.
      * @return This builder.
      */
    public medley.simulator.Message.Builder setInitiatorId(medley.simulator.Id value) {
      validate(fields()[3], value);
      this.initiator_idBuilder = null;
      this.initiator_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'initiator_id' field has been set.
      * @return True if the 'initiator_id' field has been set, false otherwise.
      */
    public boolean hasInitiatorId() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'initiator_id' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public medley.simulator.Id.Builder getInitiatorIdBuilder() {
      if (initiator_idBuilder == null) {
        if (hasInitiatorId()) {
          setInitiatorIdBuilder(medley.simulator.Id.newBuilder(initiator_id));
        } else {
          setInitiatorIdBuilder(medley.simulator.Id.newBuilder());
        }
      }
      return initiator_idBuilder;
    }

    /**
     * Sets the Builder instance for the 'initiator_id' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public medley.simulator.Message.Builder setInitiatorIdBuilder(medley.simulator.Id.Builder value) {
      clearInitiatorId();
      initiator_idBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'initiator_id' field has an active Builder instance
     * @return True if the 'initiator_id' field has an active Builder instance
     */
    public boolean hasInitiatorIdBuilder() {
      return initiator_idBuilder != null;
    }

    /**
      * Clears the value of the 'initiator_id' field.
      * @return This builder.
      */
    public medley.simulator.Message.Builder clearInitiatorId() {
      initiator_id = null;
      initiator_idBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'target_id' field.
      * @return The value.
      */
    public medley.simulator.Id getTargetId() {
      return target_id;
    }

    /**
      * Sets the value of the 'target_id' field.
      * @param value The value of 'target_id'.
      * @return This builder.
      */
    public medley.simulator.Message.Builder setTargetId(medley.simulator.Id value) {
      validate(fields()[4], value);
      this.target_idBuilder = null;
      this.target_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'target_id' field has been set.
      * @return True if the 'target_id' field has been set, false otherwise.
      */
    public boolean hasTargetId() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'target_id' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public medley.simulator.Id.Builder getTargetIdBuilder() {
      if (target_idBuilder == null) {
        if (hasTargetId()) {
          setTargetIdBuilder(medley.simulator.Id.newBuilder(target_id));
        } else {
          setTargetIdBuilder(medley.simulator.Id.newBuilder());
        }
      }
      return target_idBuilder;
    }

    /**
     * Sets the Builder instance for the 'target_id' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public medley.simulator.Message.Builder setTargetIdBuilder(medley.simulator.Id.Builder value) {
      clearTargetId();
      target_idBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'target_id' field has an active Builder instance
     * @return True if the 'target_id' field has an active Builder instance
     */
    public boolean hasTargetIdBuilder() {
      return target_idBuilder != null;
    }

    /**
      * Clears the value of the 'target_id' field.
      * @return This builder.
      */
    public medley.simulator.Message.Builder clearTargetId() {
      target_id = null;
      target_idBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'creator_id' field.
      * @return The value.
      */
    public medley.simulator.Id getCreatorId() {
      return creator_id;
    }

    /**
      * Sets the value of the 'creator_id' field.
      * @param value The value of 'creator_id'.
      * @return This builder.
      */
    public medley.simulator.Message.Builder setCreatorId(medley.simulator.Id value) {
      validate(fields()[5], value);
      this.creator_idBuilder = null;
      this.creator_id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'creator_id' field has been set.
      * @return True if the 'creator_id' field has been set, false otherwise.
      */
    public boolean hasCreatorId() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'creator_id' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public medley.simulator.Id.Builder getCreatorIdBuilder() {
      if (creator_idBuilder == null) {
        if (hasCreatorId()) {
          setCreatorIdBuilder(medley.simulator.Id.newBuilder(creator_id));
        } else {
          setCreatorIdBuilder(medley.simulator.Id.newBuilder());
        }
      }
      return creator_idBuilder;
    }

    /**
     * Sets the Builder instance for the 'creator_id' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public medley.simulator.Message.Builder setCreatorIdBuilder(medley.simulator.Id.Builder value) {
      clearCreatorId();
      creator_idBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'creator_id' field has an active Builder instance
     * @return True if the 'creator_id' field has an active Builder instance
     */
    public boolean hasCreatorIdBuilder() {
      return creator_idBuilder != null;
    }

    /**
      * Clears the value of the 'creator_id' field.
      * @return This builder.
      */
    public medley.simulator.Message.Builder clearCreatorId() {
      creator_id = null;
      creator_idBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public java.util.List<medley.simulator.Entry> getTable() {
      return table;
    }

    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public medley.simulator.Message.Builder setTable(java.util.List<medley.simulator.Entry> value) {
      validate(fields()[6], value);
      this.table = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public medley.simulator.Message.Builder clearTable() {
      table = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Message build() {
      try {
        Message record = new Message();
        record.type = fieldSetFlags()[0] ? this.type : (medley.simulator.Type) defaultValue(fields()[0]);
        if (sender_idBuilder != null) {
          record.sender_id = this.sender_idBuilder.build();
        } else {
          record.sender_id = fieldSetFlags()[1] ? this.sender_id : (medley.simulator.Id) defaultValue(fields()[1]);
        }
        record.sender_incarnation = fieldSetFlags()[2] ? this.sender_incarnation : (java.lang.Integer) defaultValue(fields()[2]);
        if (initiator_idBuilder != null) {
          record.initiator_id = this.initiator_idBuilder.build();
        } else {
          record.initiator_id = fieldSetFlags()[3] ? this.initiator_id : (medley.simulator.Id) defaultValue(fields()[3]);
        }
        if (target_idBuilder != null) {
          record.target_id = this.target_idBuilder.build();
        } else {
          record.target_id = fieldSetFlags()[4] ? this.target_id : (medley.simulator.Id) defaultValue(fields()[4]);
        }
        if (creator_idBuilder != null) {
          record.creator_id = this.creator_idBuilder.build();
        } else {
          record.creator_id = fieldSetFlags()[5] ? this.creator_id : (medley.simulator.Id) defaultValue(fields()[5]);
        }
        record.table = fieldSetFlags()[6] ? this.table : (java.util.List<medley.simulator.Entry>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
