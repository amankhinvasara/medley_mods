/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package medley.simulator;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Id extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2826464054229917628L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Id\",\"namespace\":\"medley.simulator\",\"fields\":[{\"name\":\"hostname\",\"type\":\"string\",\"default\":\"192.0.0.1\"},{\"name\":\"port\",\"type\":\"int\",\"default\":\"6666\"},{\"name\":\"ts\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence hostname;
  @Deprecated public int port;
  @Deprecated public long ts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Id() {}

  /**
   * All-args constructor.
   * @param hostname The new value for hostname
   * @param port The new value for port
   * @param ts The new value for ts
   */
  public Id(java.lang.CharSequence hostname, java.lang.Integer port, java.lang.Long ts) {
    this.hostname = hostname;
    this.port = port;
    this.ts = ts;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hostname;
    case 1: return port;
    case 2: return ts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hostname = (java.lang.CharSequence)value$; break;
    case 1: port = (java.lang.Integer)value$; break;
    case 2: ts = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hostname' field.
   * @return The value of the 'hostname' field.
   */
  public java.lang.CharSequence getHostname() {
    return hostname;
  }

  /**
   * Sets the value of the 'hostname' field.
   * @param value the value to set.
   */
  public void setHostname(java.lang.CharSequence value) {
    this.hostname = value;
  }

  /**
   * Gets the value of the 'port' field.
   * @return The value of the 'port' field.
   */
  public java.lang.Integer getPort() {
    return port;
  }

  /**
   * Sets the value of the 'port' field.
   * @param value the value to set.
   */
  public void setPort(java.lang.Integer value) {
    this.port = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public java.lang.Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(java.lang.Long value) {
    this.ts = value;
  }

  /**
   * Creates a new Id RecordBuilder.
   * @return A new Id RecordBuilder
   */
  public static medley.simulator.Id.Builder newBuilder() {
    return new medley.simulator.Id.Builder();
  }

  /**
   * Creates a new Id RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Id RecordBuilder
   */
  public static medley.simulator.Id.Builder newBuilder(medley.simulator.Id.Builder other) {
    return new medley.simulator.Id.Builder(other);
  }

  /**
   * Creates a new Id RecordBuilder by copying an existing Id instance.
   * @param other The existing instance to copy.
   * @return A new Id RecordBuilder
   */
  public static medley.simulator.Id.Builder newBuilder(medley.simulator.Id other) {
    return new medley.simulator.Id.Builder(other);
  }

  /**
   * RecordBuilder for Id instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Id>
    implements org.apache.avro.data.RecordBuilder<Id> {

    private java.lang.CharSequence hostname;
    private int port;
    private long ts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(medley.simulator.Id.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hostname)) {
        this.hostname = data().deepCopy(fields()[0].schema(), other.hostname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.port)) {
        this.port = data().deepCopy(fields()[1].schema(), other.port);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Id instance
     * @param other The existing instance to copy.
     */
    private Builder(medley.simulator.Id other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.hostname)) {
        this.hostname = data().deepCopy(fields()[0].schema(), other.hostname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.port)) {
        this.port = data().deepCopy(fields()[1].schema(), other.port);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'hostname' field.
      * @return The value.
      */
    public java.lang.CharSequence getHostname() {
      return hostname;
    }

    /**
      * Sets the value of the 'hostname' field.
      * @param value The value of 'hostname'.
      * @return This builder.
      */
    public medley.simulator.Id.Builder setHostname(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.hostname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hostname' field has been set.
      * @return True if the 'hostname' field has been set, false otherwise.
      */
    public boolean hasHostname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hostname' field.
      * @return This builder.
      */
    public medley.simulator.Id.Builder clearHostname() {
      hostname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'port' field.
      * @return The value.
      */
    public java.lang.Integer getPort() {
      return port;
    }

    /**
      * Sets the value of the 'port' field.
      * @param value The value of 'port'.
      * @return This builder.
      */
    public medley.simulator.Id.Builder setPort(int value) {
      validate(fields()[1], value);
      this.port = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'port' field has been set.
      * @return True if the 'port' field has been set, false otherwise.
      */
    public boolean hasPort() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'port' field.
      * @return This builder.
      */
    public medley.simulator.Id.Builder clearPort() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public java.lang.Long getTs() {
      return ts;
    }

    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public medley.simulator.Id.Builder setTs(long value) {
      validate(fields()[2], value);
      this.ts = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public medley.simulator.Id.Builder clearTs() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Id build() {
      try {
        Id record = new Id();
        record.hostname = fieldSetFlags()[0] ? this.hostname : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.port = fieldSetFlags()[1] ? this.port : (java.lang.Integer) defaultValue(fields()[1]);
        record.ts = fieldSetFlags()[2] ? this.ts : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
